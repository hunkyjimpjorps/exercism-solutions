#lang racket

(provide make-robot
         name
         reset!
         reset-name-cache!)

(struct robot ([name #:mutable]) #:transparent)

; use a mutable set to track all assigned names
(define robot-name-cache (mutable-set))

(define (reset-name-cache!)
  (set-clear! robot-name-cache))

; recursively call the name generation function until we get a unique name
; this will become really inefficient when the namespace's almost exhausted
; but for now it'll do
; maybe it'd be better to generate all the possible names ahead of time and assign them
; one by one until they're exhausted
(define (generate-new-random-name)
  (define candidate (string (random-letter-char)
                            (random-letter-char)
                            (random-number-char)
                            (random-number-char)
                            (random-number-char)))
  (if (set-member? robot-name-cache candidate)
      (generate-new-random-name)
      candidate))

(define (make-robot)
  (robot (generate-new-random-name)))

; alias for built-in procedure generated by the struct definition
(define (name r) (robot-name r))

(define (reset! robot-to-reset)
  (set-robot-name! robot-to-reset (generate-new-random-name)))

(define (random-letter-char) (integer->char (random 65 91)))
(define (random-number-char) (integer->char (random 48 58)))